#!/bin/bash

# Copyright 2025 Alex Yakubinskiy <prktown@gmail.com>

set -f

VERBOSE=false
DRY_RUN=true

function getYearFromDate() {
    local date="$1"
    echo $(date --date="$date" "+%Y");
}

function getGitCreationDate() {
    local file="$1"
    
    local result="$(git log --follow --format=%aI --all $file 2>&1)"
    if [[ "$?" != "0" ]]; then
        echo -e "File: $file\ngetGitCreationDate error, $result\n\n" 1>&2
        echo ""
        return 1
    fi
    
    result=$(echo "$result" | tail -1)
    if [[ "$result" == "" ]]; then
        echo ""
        return 0
    fi
    
    result="$(date --date="$result" 2>&1)"
    if [[ "$?" != "0" ]]; then
        echo -e "File: $file\ngetGitCreationDate error, $result\n\n" 1>&2
        echo ""
        return 1
    fi
    
    
    echo "$result"
    return 0    
}

function getGitModificationDate() {
    local file="$1"
    
    local result="$(git log --follow --format=%aI --all $file 2>&1)"
    if [[ "$?" != "0" ]]; then
        echo -e "File: $file\ngetGitModificationDate error, $result\n\n" 1>&2
        echo ""
        return 1
    fi
    
    result=$(echo "$result" | head -1)
    if [[ "$result" == "" ]]; then
        echo ""
        return 0
    fi
    
    result="$(date --date="$result" 2>&1)"
    if [[ "$?" != "0" ]]; then
        echo -e "File: $file\ngetGitModificationDate error, $result\n\n" 1>&2
        echo ""
        return 1
    fi
    
    
    echo "$result"
    return 0    
}

function getStatCreationDate() {
    local file="$1"
    
    local result="$(stat -c '%W' $file 2>&1)"
    if [[ "$?" != "0" ]]; then
        echo -e "File: $file\ngetStatCreationDate error, $result\n\n" 1>&2
        echo ""
        return 1
    fi
    
    if [[ "$result" == "" ]]; then
        echo ""
        return 0
    fi
    
    result="$(date --date="@$result" 2>&1)"
    if [[ "$?" != "0" ]]; then
        echo -e "File: $file\ngetStatCreationDate error, $result\n\n" 1>&2
        echo ""
        return 1
    fi
    
    echo "$result"
    return 0    
}

function getStatModificationDate() {
    local file="$1"
    
    local result="$(stat -c '%Y' $file 2>&1)"
    if [[ "$?" != "0" ]]; then
        echo -e "File: $file\ngetStatModificationDate error, $result\n\n" 1>&2
        echo ""
        return 1
    fi
    
    if [[ "$result" == "" ]]; then
        echo ""
        return 0
    fi
    
    result="$(date --date="@$result" 2>&1)"
    if [[ "$?" != "0" ]]; then
        echo -e "File: $file\ngetStatModificationDate error, $result\n\n" 1>&2
        echo ""
        return 1
    fi
    
    echo "$result"
    return 0    
}

function getCopyrightFromDates() {
    local copyright_placeholder="$1"
    shift
    local arr_input=("$@")
    local arr=()
    
    # skip empty elements
    for i in "${arr_input[@]}"; do
        if [[ "$i" != "" ]]; then
            arr+=($i)
        fi
    done
    
    local min=${arr[0]}
    local max=${arr[0]}
    
    # find min, max dates
    for i in "${arr[@]}"; do
        if (( i < min )); then
            min=$i
        elif (( i > max )); then
            max=$i
        fi
    done
    
    
    
    if [[ "$min" == "$max" ]]; then  
        #local placeholder_date="$comment Copyright (c) ${min}. Open Mobile Platform LLC."
        local placeholder_date="${min}"
        
    else
        #local copyright_long_placeholder="$comment Copyright (c) ${min}-${max}. Open Mobile Platform LLC."
        local placeholder_date="${min}-${max}"
    fi

    local placeholder=${copyright_placeholder/|date|/"$placeholder_date"}
    echo "$placeholder"
}

function goFile() {
    local file="$1"
    local copyright_placeholder="$2"
    
    if $VERBOSE; then
        echo -e "[$PWD/$file]\n"
    fi
    
    #check if file exist
    
    local hasError="false"
    
    local statCreationDate="$(getStatCreationDate $file)"
    if [[ "$?" != "0" ]]; then
        echo "bad date 1"
        hasError="true"
    fi
    
    local statModificationDate="$(getStatModificationDate $file)"
    if [[ "$?" != "0" ]]; then
        echo "bad date 2"
        hasError="true"
    fi
    
    local gitCreationDate="$(getGitCreationDate $file)"
    if [[ "$?" != "0" ]]; then
        echo "bad date 3"
        hasError="true"
    fi
    
    local gitModificationDate="$(getGitModificationDate $file)"
    if [[ "$?" != "0" ]]; then
        echo "bad date 4"
        hasError="true"
    fi
    
    local nowDate=$(date)
    
    if $VERBOSE; then
        echo -e "statCreationDate:\t$statCreationDate"
        echo -e "statModificationDate:\t$statModificationDate"
        echo -e "gitCreationDate:\t${gitCreationDate:-Do not exist in git}"
        echo -e "gitModificationDate:\t${gitModificationDate:-Do not exist in git}"
        echo -e "nowDate:\t\t$nowDate"
        echo -e "\n"
    fi
       
    
    #if hasError="true"
    
    
    #    (?m)^.*Copyright \(c\) \d\d\d\d(-\d\d\d\d)?\. Open Mobile Platform LLC\.$
    #local existed_copyright=$(grep -Eo '^.*Copyright \(c\) [0-9]+[0-9]+[0-9]+[0-9]+(-[0-9]+[0-9]+[0-9]+[0-9]+)?\. Open Mobile Platform LLC\.$'

    
    local copyright_regexp='^.*Copyright \(c\) ([0-9]+[0-9]+[0-9]+[0-9]+)(-[0-9]+[0-9]+[0-9]+[0-9]+)?\. Open Mobile Platform LLC\.$'
    local founded=$(sed -nr "s/$copyright_regexp/\0/p" $file)
    local existed_copyright_created=$(sed -nr "s/$copyright_regexp/\1/p" $file)
    local existed_copyright_modified=$(sed -nr "s/$copyright_regexp/\2/p" $file | cut -c2-)
    
    local year_git_start=$(getYearFromDate "$gitCreationDate")
    local year_git_finish=$(getYearFromDate "$gitModificationDate")
    local year_now=$(getYearFromDate "$nowDate")
    
    local allYears=()
    
    allYears+=($existed_copyright_created)
    allYears+=($existed_copyright_modified)
    allYears+=($year_git_start)
    allYears+=($year_git_finish)
    
    target_copyright="$(getCopyrightFromDates "${copyright_placeholder}" "${allYears[@]}")"
    
    if $VERBOSE; then
        echo -e "$target_copyright\n$founded"
    fi
    
    # check if target copyright if differ than existed or
    # if we did not find any copyright
    if [[ "$founded" != "$target_copyright" || "$founded" == "" ]]; then
        # since we changing file, our end date must be current year
        allYears+=($year_now)
        target_copyright="$(getCopyrightFromDates "${copyright_placeholder}" "${allYears[@]}")"
        
        echo -e "[v] $(realpath $file) will be updated"
        echo -e "\tOld copyright: $founded"
        echo -e "\tNew copyright: $target_copyright"
        
        if ! $DRY_RUN; then
            if [[ "$founded" == "" ]]; then
                sed -i -r "1s|^|${target_copyright}\n\n|" $file
            else
                sed -i -r "s|$copyright_regexp|$target_copyright|" $file
            fi
        fi
        

    fi
}

cd /home/yas/omp-crypto-storage

excludeDirs=()
filesToFind=()

filesToFind+=(-name "*.cpp")


#readarray -d '' arr < <($(find . -not -path "*.git/*" -not -path "./submodules/*" \( -name "*.cpp" -o -name "*.h" -o -name "*.qml" \) -print0))

dirs=()

function updateDir() {
    local dir="$1"
    
    cd "$dir"
    readarray -d '' arr < <(find . "${excludeDirs[@]}" \( "${filesToFind[@]}" \) -print0)

    for i in "${arr[@]}"; do
        #echo "$(realpath $i)"
        goFile "$i" "// Copyright (c) |date|. Open Mobile Platform LLC."
    done
}

function parseCli() {
    PARAMS=()
    
    while (( "$#" )); do
    case "$1" in
        --exclude)
        excludeDirs+=(-not -path "./$2")
        shift 2
        ;;       
        
        --file)
        filesToFind+=(-o -name "$2")
        shift 2
        ;;  
        
        -c|--config)
        USE_CONFIG=true
        shift
        ;;
        -d|--device)
        DEVICE_TYPE=$2
        shift 2
        ;;
        --) # end argument parsing
        shift
        break
        ;;
        -*|--*=) # unsupported flags
        echo "Error: Unsupported flag $1" >&2
        exit 1
        ;;
        *) # preserve positional arguments
        dirs+=("$1")
        PARAMS+=("$1")
        shift
        ;;
    esac
    done
}

parseCli $@

echo -e "\nWill look in dirs:"

for i in "${dirs[@]}"; do
    if [[ ${i:0:1} != / ]]; then
        echo "Error: directory $i is not absolute path"
        exit 1
    fi
    
    echo -e "\t$i"
done

echo -en "\n\n"

for i in "${dirs[@]}"; do
    echo -e "Scan directory: $i"
    updateDir "$i"
done


